// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// This is an optional zod helper script:
// It will generate zod schemas based on this prisma-schema in `/db/zod-schema-inspiration`
// We can use those, to improve our own zod schema files.
// However, we cannot have this active all the time, due to an issue with blitz.
// How to use:
// 1. Remove comment below
// 2. Use `npx blitz prisma generate` (mind the `x`)
// 3. Copy what you need to your own schema
// 4. Revert (1)
//
// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod-schema-inspiration"
//   relationModel            = true
//   modelCase                = "PascalCase"
//   modelSuffix              = "Model"
//   useDecimalJs             = true
//   imports                  = null
//   prismaJsonNullability    = true
// }

// --------------------------------------

model User {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  //
  osmId          Int            @unique
  osmName        String?
  osmDescription String?
  osmAvatar      String?
  hashedPassword String?
  role           UserRoleEnum   @default(USER)
  email          String?        @unique
  firstName      String?
  lastName       String?
  //
  tokens         Token[]
  sessions       Session[]
  Membership     Membership[]
  Note           Note[]
  NoteComment    NoteComment[]
  qaEvaluations  QaEvaluation[]
}

enum UserRoleEnum {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  //
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  //
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  //
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Region {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  //
  slug         String   @unique
  public       Boolean  @default(false)
  exportPublic Boolean  @default(false)

  Membership Membership[]
  uploads    Upload[]
  Note       Note[]
  qaConfigs  QaConfig[]
}

model Membership {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  region   Region @relation(fields: [regionId], references: [id])
  regionId Int

  @@unique([regionId, userId])
}

model Upload {
  id              Int                 @id @default(autoincrement())
  createdAt       DateTime            @default(now())
  createdBy       UploadCreatedByEnum @default(SCRIPT)
  updatedAt       DateTime            @updatedAt
  //
  slug            String              @unique
  configs         Json
  public          Boolean             @default(false)
  mapRenderFormat MapRenderFormatEnum
  mapRenderUrl    String
  pmtilesUrl      String
  geojsonUrl      String
  githubUrl       String
  //
  regions         Region[]
}

enum UploadCreatedByEnum {
  USER
  SCRIPT
}

enum MapRenderFormatEnum {
  pmtiles
  geojson
}

model Note {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  //
  author       User          @relation(fields: [userId], references: [id])
  userId       Int
  //
  region       Region        @relation(fields: [regionId], references: [id])
  regionId     Int
  //
  subject      String
  body         String?
  resolvedAt   DateTime?
  latitude     Float
  longitude    Float
  // osm_type    String?       @db.VarChar
  // osm_id      String?
  //
  noteComments NoteComment[]
}

model NoteComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
  //
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    Int
  //
  body      String
}

// QA System Models
model QaConfig {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug     String // e.g., "euvm_parking_capacity"
  label    String // e.g., "eUVM Parkplätze Kapazität"
  isActive Boolean @default(true)

  // Reference to existing data table (with schema prefix)
  mapTable String // e.g., "public.qa_parkings_euvm"

  // Map attribution for the source
  mapAttribution String? // e.g., "QA Data: tilda-geo.de"

  // Thresholds for automatic system evaluation
  goodThreshold        Float @default(0.1) // relative <= 0.1 difference = GOOD
  needsReviewThreshold Float @default(0.2) // relative <= 0.2 difference = NEEDS_REVIEW

  region   Region @relation(fields: [regionId], references: [id])
  regionId Int

  qaEvaluations QaEvaluation[]

  @@unique([regionId, slug])
}

model QaEvaluation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Reference to row in existing data table (could be voronoi, h3, etc.)
  areaId String // Links to public.qa_parkings_euvm.id

  // System automatic evaluation (based on thresholds)
  systemStatus QaSystemStatus @default(NEEDS_REVIEW)

  // Manual user evaluation status
  userStatus QaEvaluationStatus? // NULL means no user decision yet

  // Optional evaluation text/reasoning (only for user evaluations)
  body String?

  config   QaConfig @relation(fields: [configId], references: [id])
  configId Int

  // Evaluator tracking - either system or user
  evaluatorType QaEvaluatorType @default(SYSTEM)
  author        User?           @relation(fields: [userId], references: [id])
  userId        Int?

  // Remove unique constraint to allow evaluation history
  // @@unique([configId, areaId])  // REMOVED
}

enum QaSystemStatus {
  GOOD // Green - no review needed
  NEEDS_REVIEW // Yellow - medium difference
  PROBLEMATIC // Red - large difference
}

enum QaEvaluationStatus {
  OK_STRUCTURAL_CHANGE // "Diff OK, caused by structural change in the area like construction"
  OK_REFERENCE_ERROR // "Diff OK, caused by wrong past/reference data"
  NOT_OK_DATA_ERROR // "Diff not OK, current data needs to be fixed"
  NOT_OK_PROCESSING_ERROR // "Diff not OK, processing needs to be fixed"
}

enum QaEvaluatorType {
  SYSTEM
  USER
}
