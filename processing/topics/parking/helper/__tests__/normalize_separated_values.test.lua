local normalize_separated_values = require('normalize_separated_values')

describe('normalize_separated_values', function()
  describe('basic functionality', function()
    it('should return nil for nil input', function()
      local result = normalize_separated_values(nil, ';')
      assert.are.equal(result, nil)
    end)

    it('should return nil for empty string', function()
      local result = normalize_separated_values('', ';')
      assert.are.equal(result, nil)
    end)

    it('should return nil for whitespace-only string', function()
      local result = normalize_separated_values('   ', ';')
      assert.are.equal(result, nil)
    end)

    it('should normalize simple values', function()
      local result = normalize_separated_values('bbb;aaa', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should handle single value', function()
      local result = normalize_separated_values('single', ';')
      assert.are.equal(result, 'single')
    end)

    it('should handle values with leading/trailing separators', function()
      local result = normalize_separated_values(';bbb;aaa;', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should handle values with whitespace', function()
      local result = normalize_separated_values('  bbb  ;  aaa  ', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should remove duplicates', function()
      local result = normalize_separated_values('bbb;aaa;bbb;aaa', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should handle empty parts', function()
      local result = normalize_separated_values('bbb;;aaa;;', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should handle mixed case and sort alphabetically', function()
      local result = normalize_separated_values('Zebra;apple;Banana', ';')
      assert.are.equal(result, 'Banana;Zebra;apple')
    end)
  end)

  describe('edge cases', function()
    it('should handle only separators', function()
      local result = normalize_separated_values(';;;', ';')
      assert.are.equal(result, nil)
    end)

    it('should handle separators with whitespace', function()
      local result = normalize_separated_values(' ; ; ; ', ';')
      assert.are.equal(result, nil)
    end)

    it('should handle single separator', function()
      local result = normalize_separated_values(';', ';')
      assert.are.equal(result, nil)
    end)

    it('should handle multiple spaces between separators', function()
      local result = normalize_separated_values('  aaa  ;  bbb  ;  ccc  ', ';')
      assert.are.equal(result, 'aaa;bbb;ccc')
    end)
  end)

  describe('custom separators', function()
    it('should work with comma separator', function()
      local result = normalize_separated_values('bbb,aaa', ',')
      assert.are.equal(result, 'aaa,bbb')
    end)

    it('should work with pipe separator', function()
      local result = normalize_separated_values('bbb|aaa', '|')
      assert.are.equal(result, 'aaa|bbb')
    end)

    it('should work with space separator', function()
      local result = normalize_separated_values('bbb aaa', ' ')
      assert.are.equal(result, 'aaa bbb')
    end)
  end)

  describe('complex scenarios', function()
    it('should handle the specific case requested: ";bbb;aaa;"', function()
      local result = normalize_separated_values(';bbb;aaa;', ';')
      assert.are.equal(result, 'aaa;bbb')
    end)

    it('should handle multiple duplicates with mixed separators', function()
      local result = normalize_separated_values(';taxi;bus;taxi;hgv;bus;', ';')
      assert.are.equal(result, 'bus;hgv;taxi')
    end)

    it('should handle numbers and letters mixed', function()
      local result = normalize_separated_values('3;1;2;a;c;b', ';')
      assert.are.equal(result, '1;2;3;a;b;c')
    end)
  end)
end)
