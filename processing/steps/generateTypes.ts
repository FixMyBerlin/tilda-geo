import { $ } from 'bun'
import { join } from 'path'
import { TYPES_DIR } from '../constants/directories.const'
import { params } from '../utils/parameters'

/**
 * Generate types based on the processing tables.
 * @param processedTables the list of tables to include in the type
 */
export async function generateTypes(processedTables: string[]) {
  // Only generate type when in development
  if (params.environment !== 'development') return

  console.log('[DEV] Generating types...')

  writeTableNameTypes(processedTables)
  writeTodoKeyTypes()

  autoformatTypeFiles()
}

async function writeTableNameTypes(processedTables: string[]) {
  if (params.processOnlyTopics.length > 0) {
    console.info('[DEV] Generating types:', 'Skipped because `PROCESS_ONLY_TOPICS` is present')
    return
  }

  const typeFile = join(TYPES_DIR, 'tableNames.generated.const.ts')
  const content = prefixGeneratedFiles(
    `const tableNames = [${processedTables
      .sort()
      .map((tableName) => `'${tableName}'`)
      .join(',\n')}]
export type TableNames = (typeof tableNames)[number]`,
  )

  await Bun.write(typeFile, content)
}

async function callLuaForNames(luaFilename: 'ExtractBikelaneTodoKeys' | 'ExtractRoadTodoKeys') {
  try {
    const rawResult = await $`lua /processing/utils/types/${luaFilename}.lua`.text()
    const lines = rawResult.split('\n').filter(Boolean).sort()
    const result = lines
      .map((line) => line.split(';'))
      .map(([key, todoTableOnly]) => {
        return { key, todoTableOnly: JSON.parse(todoTableOnly) as boolean }
      })
    return result
  } catch (error) {
    throw new Error(`[DEV] Failed to get names for "${luaFilename}": ${error}`)
  }
}

async function writeTodoKeyTypes() {
  const typeFilePath = join(TYPES_DIR, 'todoKeys.generated.const.ts')
  const typeFile = Bun.file(typeFilePath)

  const bikelaneTodoNames = await callLuaForNames('ExtractBikelaneTodoKeys')
  const bikelaneTodoNamesTableAndField = bikelaneTodoNames
    .filter((e) => e.todoTableOnly === false)
    .map((e) => e.key)
  const bikelaneTodoNamesTableOnly = bikelaneTodoNames
    .filter((e) => e.todoTableOnly === true)
    .map((e) => e.key)

  const roadTodoNames = await callLuaForNames('ExtractRoadTodoKeys')
  const roadTodoNamesTableAndField = roadTodoNames
    .filter((e) => e.todoTableOnly === false)
    .map((e) => e.key)
  const roadTodoNamesTableOnly = roadTodoNames
    .filter((e) => e.todoTableOnly === true)
    .map((e) => e.key)

  const fileContent = `
  export const bikelaneTodoKeysTableAndField = [${bikelaneTodoNamesTableAndField.map((name) => `'${name}'`).join(',')}] as const
  export type BikelaneTodoKeysTableAndField = (typeof bikelaneTodoKeysTableAndField)[number]

  export const bikelaneTodoKeysTableOnly = [${bikelaneTodoNamesTableOnly.map((name) => `'${name}'`).join(',')}] as const
  export type BikelaneTodoKeysTableOnly = (typeof bikelaneTodoKeysTableOnly)[number]

  export const roadTodoKeysTableAndField = [${roadTodoNamesTableAndField.map((name) => `'${name}'`).join(',')}] as const
  export type RoadTodoKeysTableAndField = (typeof roadTodoKeysTableAndField)[number]

  export const roadTodoKeysTableOnly = [${roadTodoNamesTableOnly.map((name) => `'${name}'`).join(',')}] as const
  export type RoadTodoKeysTableOnly = (typeof roadTodoKeysTableOnly)[number]
  `

  const content = prefixGeneratedFiles(fileContent)
  await Bun.write(typeFile, content)
}

function prefixGeneratedFiles(content: string) {
  return `// DO NOT EDIT MANUALLY
// This file was automatically generated by \`processing/steps/generateTypes.ts\`
// To update, run \`docker compose up processing\`

${content}
`
}

async function autoformatTypeFiles() {
  try {
    await $`bunx prettier -w --config=/processing/.prettierrc ${TYPES_DIR} > /dev/null`
  } catch (error) {
    throw new Error(`Failed to run prettier on auto generated types: ${error}`)
  }
}
